#include <stdio.h>

#define N_PROCESS 5
#define N_RESOURCE 3

void calc_need(int need[][N_RESOURCE], int max[][N_RESOURCE], int alloc[][N_RESOURCE], int avail[]) {
    for (int i = 0; i < N_PROCESS; i++) {
        for (int j = 0; j < N_RESOURCE; j++) {
            need[i][j] = max[i][j] - alloc[i][j];
            if (need[i][j] < 0) {
                printf("Error: Allocation cannot be greater than max!\n");
                return;
            }
        }
    }
}

int main() {
    int alloc[N_PROCESS][N_RESOURCE] = {{1, 1, 2},
                                        {2, 1, 2},
                                        {3, 0, 1},
                                        {0, 2, 0},
                                        {1, 1, 2}};
    int max[N_PROCESS][N_RESOURCE] = {{5, 4, 4},
                                      {4, 3, 3},
                                      {9, 1, 3},
                                      {8, 6, 4},
                                      {2, 2, 3}};
    int avail[N_RESOURCE] = {3, 2, 1};
    int need[N_PROCESS][N_RESOURCE];

    calc_need(need, max, alloc, avail);

    printf("Process\t Allocation\t Max\t Need\n");
    printf("\t A B C\t A B C\t A B C\n");
    for (int i = 0; i < N_PROCESS; i++) {
        printf("P%d\t", i);
        for (int j = 0; j < N_RESOURCE; j++) {
            printf("%d ", alloc[i][j]);
        }
        printf("\t");
        for (int j = 0; j < N_RESOURCE; j++) {
            printf("%d ", max[i][j]);
        }
        printf("\t");
        for (int j = 0; j < N_RESOURCE; j++) {
            printf("%d ", need[i][j]);
        }
        printf("\n");
    }

    return 0;
}
