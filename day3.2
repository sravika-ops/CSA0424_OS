#include <stdio.h>

#define MAX_PARTITIONS 6
#define MAX_PROCESSES 5

int partitions[MAX_PARTITIONS] = {300, 600, 350, 200, 750, 125};
int processes[MAX_PROCESSES] = {115, 500, 358, 200, 375};
int allocation[MAX_PROCESSES] = {-1, -1, -1, -1, -1};

void best_fit() {
    for (int i = 0; i < MAX_PROCESSES; i++) {
        int best_partition = -1;
        for (int j = 0; j < MAX_PARTITIONS; j++) {
            if (partitions[j] >= processes[i]) {
                if (best_partition == -1 || partitions[j] < partitions[best_partition]) {
                    best_partition = j;
                }
            }
        }
        if (best_partition != -1) {
            allocation[i] = best_partition;
            partitions[best_partition] -= processes[i];
        }
    }
}

void print_allocation() {
    printf("\nProcess\tSize\tPartition\n");
    for (int i = 0; i < MAX_PROCESSES; i++) {
        printf("%d\t%d\t", i+1, processes[i]);
        if (allocation[i] != -1) {
            printf("%d\n", allocation[i]+1);
        }
        else {
            printf("Not allocated\n");
        }
    }
}

int main() {
    printf("Memory partitions: ");
    for (int i = 0; i < MAX_PARTITIONS; i++) {
        printf("%d KB ", partitions[i]);
    }
    printf("\n\nProcesses: ");
    for (int i = 0; i < MAX_PROCESSES; i++) {
        printf("%d KB ", processes[i]);
    }
    printf("\n\n");

    best_fit();

    print_allocation();

    return 0;
}
